{"version":3,"sources":["../../src/models/user.js"],"names":["user","sequelize","DataTypes","User","define","username","type","STRING","unique","allowNull","email","password","role","firstName","lastName","phoneNumber","completedProfile","BOOLEAN","associate","models","hasMany","Message","onDelete","findByLogin","login","findOne","where","beforeCreate","generatePasswordHash","beforeUpdate","prototype","saltRounds","bcrypt","hash","validatePassword","compare"],"mappings":";;;;;;;AACA;;;;AADA;AAGA;AACA,MAAMA,IAAI,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACrC,QAAMC,IAAI,GAAGF,SAAS,CAACG,MAAV,CAAiB,MAAjB,EAAyB;AACpCC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADR;AAERC,MAAAA,MAAM,EAAE,IAFA;AAGRC,MAAAA,SAAS,EAAE,KAHH,CAIR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAbQ,KAD0B;AAgBpCC,IAAAA,KAAK,EAAE;AACLJ,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADX;AAELC,MAAAA,MAAM,EAAE,IAFH;AAGLC,MAAAA,SAAS,EAAE,KAHN,CAIL;AACA;AACA;AACA;AACA;;AARK,KAhB6B;AA0BpCE,IAAAA,QAAQ,EAAE;AACRL,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADR;AAERE,MAAAA,SAAS,EAAE,KAFH,CAGR;AACA;AACA;AACA;AACA;;AAPQ,KA1B0B;AAmCpCG,IAAAA,IAAI,EAAE;AACJN,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADZ;AAEJE,MAAAA,SAAS,EAAE;AAFP,KAnC8B;AAuCpCI,IAAAA,SAAS,EAAE;AACTP,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADP;AAETE,MAAAA,SAAS,EAAE;AAFF,KAvCyB;AA2CpCK,IAAAA,QAAQ,EAAE;AACRR,MAAAA,IAAI,EAAEJ,SAAS,CAACK,MADR;AAERE,MAAAA,SAAS,EAAE;AAFH,KA3C0B;AA+CpCM,IAAAA,WAAW,EAAE;AACXT,MAAAA,IAAI,EAAEJ,SAAS,CAACK;AADL,KA/CuB;AAkDpCS,IAAAA,gBAAgB,EAAE;AAChBV,MAAAA,IAAI,EAAEJ,SAAS,CAACe;AADA;AAlDkB,GAAzB,CAAb,CADqC,CAwDrC;;AACAd,EAAAA,IAAI,CAACe,SAAL,GAAkBC,MAAD,IAAY;AAC3BhB,IAAAA,IAAI,CAACiB,OAAL,CAAaD,MAAM,CAACE,OAApB,EAA6B;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA7B;AACD,GAFD,CAzDqC,CA6DrC;;;AACAnB,EAAAA,IAAI,CAACoB,WAAL,GAAmB,MAAOC,KAAP,IAAiB;AAClC;AACA,QAAIxB,IAAI,GAAG,MAAMG,IAAI,CAACsB,OAAL,CAAa;AAC5BC,MAAAA,KAAK,EAAE;AAAErB,QAAAA,QAAQ,EAAEmB;AAAZ;AADqB,KAAb,CAAjB,CAFkC,CAMlC;;AACA,QAAI,CAACxB,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAG,MAAMG,IAAI,CAACsB,OAAL,CAAa;AACxBC,QAAAA,KAAK,EAAE;AAAEhB,UAAAA,KAAK,EAAEc;AAAT;AADiB,OAAb,CAAb;AAGD;;AAED,WAAOxB,IAAP;AACD,GAdD,CA9DqC,CA8ErC;;;AACAG,EAAAA,IAAI,CAACwB,YAAL,CAAkB,MAAO3B,IAAP,IAAgB;AAChCA,IAAAA,IAAI,CAACW,QAAL,GAAgB,MAAMX,IAAI,CAAC4B,oBAAL,EAAtB;AACD,GAFD,EA/EqC,CAmFrC;;AACAzB,EAAAA,IAAI,CAAC0B,YAAL,CAAkB,MAAO7B,IAAP,IAAgB;AAChCA,IAAAA,IAAI,CAACW,QAAL,GAAgB,MAAMX,IAAI,CAAC4B,oBAAL,EAAtB;AACD,GAFD,EApFqC,CAwFrC;;AACAzB,EAAAA,IAAI,CAAC2B,SAAL,CAAeF,oBAAf,GAAsC,kBAAkB;AACtD,UAAMG,UAAU,GAAG,EAAnB;AACA,WAAO,MAAMC,gBAAOC,IAAP,CAAY,KAAKtB,QAAjB,EAA2BoB,UAA3B,CAAb;AACD,GAHD,CAzFqC,CA8FrC;;;AACA5B,EAAAA,IAAI,CAAC2B,SAAL,CAAeI,gBAAf,GAAkC,gBAAgBvB,QAAhB,EAA0B;AAC1D,WAAO,MAAMqB,gBAAOG,OAAP,CAAexB,QAAf,EAAyB,KAAKA,QAA9B,CAAb;AACD,GAFD;;AAIA,SAAOR,IAAP;AACD,CApGD;;eAsGeH,I","sourcesContent":["// Password hash crypto\r\nimport bcrypt from \"bcrypt\";\r\n\r\n// Define user with validation requirements\r\nconst user = (sequelize, DataTypes) => {\r\n  const User = sequelize.define(\"user\", {\r\n    username: {\r\n      type: DataTypes.STRING,\r\n      unique: true,\r\n      allowNull: false,\r\n      // validate: {\r\n      //   notEmpty: {\r\n      //     args: true,\r\n      //     msg: \"Username required.\",\r\n      //   },\r\n      //   len: {\r\n      //     args: [5, 20],\r\n      //     msg: \"Username length of 5-20 required.\",\r\n      //   },\r\n      // },\r\n    },\r\n    email: {\r\n      type: DataTypes.STRING,\r\n      unique: true,\r\n      allowNull: false,\r\n      // validate: {\r\n      //   notEmpty: true,\r\n      //   isEmail: true,\r\n      //   msg: \"Valid email is required\",\r\n      // },\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n      // validate: {\r\n      //   notEmpty: true,\r\n      //   len: [7, 42],\r\n      //   msg: \"Password length of 7-42 required.\",\r\n      // },\r\n    },\r\n    role: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    firstName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    lastName: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    phoneNumber: {\r\n      type: DataTypes.STRING,\r\n    },\r\n    completedProfile: {\r\n      type: DataTypes.BOOLEAN,\r\n    },\r\n  });\r\n\r\n  // Delete all user messages\r\n  User.associate = (models) => {\r\n    User.hasMany(models.Message, { onDelete: \"CASCADE\" });\r\n  };\r\n\r\n  // Define user by login value\r\n  User.findByLogin = async (login) => {\r\n    // Attempt to find user based on username\r\n    let user = await User.findOne({\r\n      where: { username: login },\r\n    });\r\n\r\n    // If user not found my username, find by email\r\n    if (!user) {\r\n      user = await User.findOne({\r\n        where: { email: login },\r\n      });\r\n    }\r\n\r\n    return user;\r\n  };\r\n\r\n  // Create hash of inputted password\r\n  User.beforeCreate(async (user) => {\r\n    user.password = await user.generatePasswordHash();\r\n  });\r\n\r\n  // Create hash of inputted password\r\n  User.beforeUpdate(async (user) => {\r\n    user.password = await user.generatePasswordHash();\r\n  });\r\n\r\n  // Generate password hash using bcrypt\r\n  User.prototype.generatePasswordHash = async function () {\r\n    const saltRounds = 10;\r\n    return await bcrypt.hash(this.password, saltRounds);\r\n  };\r\n\r\n  // Validate stored user password with user input\r\n  User.prototype.validatePassword = async function (password) {\r\n    return await bcrypt.compare(password, this.password);\r\n  };\r\n\r\n  return User;\r\n};\r\n\r\nexport default user;\r\n"],"file":"user.js"}