{"version":3,"sources":["../../src/resolvers/authorization.js"],"names":["isAuthenticated","parent","args","me","skip","ForbiddenError","isAdmin","role","isMessageOwner","id","models","message","Message","findByPk","raw","userId","isUser","user","User","isAuthEmployee","employer","Employer","owner"],"mappings":";;;;;;;AACA;;AAEA;;AAHA;AAEA;AAGA;AACO,MAAMA,eAAe,GAAG,CAACC,MAAD,EAASC,IAAT,EAAe;AAAEC,EAAAA;AAAF,CAAf,KAC7BA,EAAE,GAAGC,sBAAH,GAAU,IAAIC,4BAAJ,CAAmB,4BAAnB,CADP,C,CAGP;;;;AACO,MAAMC,OAAO,GAAG,wCACrBN,eADqB,EAErB,CAACC,MAAD,EAASC,IAAT,EAAe;AAAEC,EAAAA,EAAE,EAAE;AAAEI,IAAAA;AAAF;AAAN,CAAf,KACEA,IAAI,KAAK,OAAT,GAAmBH,sBAAnB,GAA0B,IAAIC,4BAAJ,CAAmB,0BAAnB,CAHP,CAAhB,C,CAMP;;;;AACO,MAAMG,cAAc,GAAG,OAAOP,MAAP,EAAe;AAAEQ,EAAAA;AAAF,CAAf,EAAuB;AAAEC,EAAAA,MAAF;AAAUP,EAAAA;AAAV,CAAvB,KAA0C;AACtE,QAAMQ,OAAO,GAAG,MAAMD,MAAM,CAACE,OAAP,CAAeC,QAAf,CAAwBJ,EAAxB,EAA4B;AAAEK,IAAAA,GAAG,EAAE;AAAP,GAA5B,CAAtB;;AAEA,MAAIH,OAAO,CAACI,MAAR,KAAmBZ,EAAE,CAACM,EAA1B,EAA8B;AAC5B,UAAM,IAAIJ,4BAAJ,CAAmB,6BAAnB,CAAN;AACD;;AAED,SAAOD,sBAAP;AACD,CARM,C,CAUP;;;;;AACO,MAAMY,MAAM,GAAG,OAAOf,MAAP,EAAe;AAAEQ,EAAAA;AAAF,CAAf,EAAuB;AAAEC,EAAAA,MAAF;AAAUP,EAAAA;AAAV,CAAvB,KAA0C;AAC9D,QAAMc,IAAI,GAAG,MAAMP,MAAM,CAACQ,IAAP,CAAYL,QAAZ,CAAqBJ,EAArB,EAAyB;AAAEK,IAAAA,GAAG,EAAE;AAAP,GAAzB,CAAnB;;AAEA,MAAIG,IAAI,CAACR,EAAL,KAAYN,EAAE,CAACM,EAAnB,EAAuB;AACrB,UAAM,IAAIJ,4BAAJ,CAAmB,4BAAnB,CAAN;AACD;;AAED,SAAOD,sBAAP;AACD,CARM,C,CASP;;;;;AACO,MAAMe,cAAc,GAAG,OAAOlB,MAAP,EAAe;AAAEQ,EAAAA;AAAF,CAAf,EAAuB;AAAEC,EAAAA,MAAF;AAAUP,EAAAA;AAAV,CAAvB,KAA0C;AACtE,QAAMiB,QAAQ,GAAG,MAAMV,MAAM,CAACW,QAAP,CAAgBR,QAAhB,CAAyBJ,EAAzB,EAA6B;AAAEK,IAAAA,GAAG,EAAE;AAAP,GAA7B,CAAvB;;AAEA,MAAIM,QAAQ,CAACE,KAAT,KAAmBnB,EAAE,CAACM,EAA1B,EAA8B;AAC5B,UAAM,IAAIJ,4BAAJ,CAAmB,4BAAnB,CAAN;AACD,GALqE,CAMtE;;;AACA,SAAOD,sBAAP;AACD,CARM","sourcesContent":["// Apollo error handling\nimport { ForbiddenError } from \"apollo-server\";\n// Allow for authorizations and null returns\nimport { combineResolvers, skip } from \"graphql-resolvers\";\n\n// Verify user is authenticated\nexport const isAuthenticated = (parent, args, { me }) =>\n  me ? skip : new ForbiddenError(\"Not authenticated as user.\");\n\n// Verify is user is admin\nexport const isAdmin = combineResolvers(\n  isAuthenticated,\n  (parent, args, { me: { role } }) =>\n    role === \"ADMIN\" ? skip : new ForbiddenError(\"Not authorized as admin.\")\n);\n\n// Check if message is owned by user\nexport const isMessageOwner = async (parent, { id }, { models, me }) => {\n  const message = await models.Message.findByPk(id, { raw: true });\n\n  if (message.userId !== me.id) {\n    throw new ForbiddenError(\"Not authenticated as owner.\");\n  }\n\n  return skip;\n};\n\n// Check if user is current user\nexport const isUser = async (parent, { id }, { models, me }) => {\n  const user = await models.User.findByPk(id, { raw: true });\n\n  if (user.id !== me.id) {\n    throw new ForbiddenError(\"Not authenticated as user.\");\n  }\n\n  return skip;\n};\n// Check if user is current owner or team member\nexport const isAuthEmployee = async (parent, { id }, { models, me }) => {\n  const employer = await models.Employer.findByPk(id, { raw: true });\n\n  if (employer.owner !== me.id) {\n    throw new ForbiddenError(\"Not authenticated as user.\");\n  }\n  // && !_.includes(employer.teamMembers, me.id)\n  return skip;\n};\n"],"file":"authorization.js"}