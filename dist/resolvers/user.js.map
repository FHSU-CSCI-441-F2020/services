{"version":3,"sources":["../../src/resolvers/user.js"],"names":["createToken","user","secret","expiresIn","id","email","username","role","jwt","sign","Query","getUsers","parent","args","models","User","findAll","getUser","findByPk","me","Mutation","registerUser","password","firstName","lastName","phoneNumber","completedProfile","newUser","create","token","loginUser","login","findByLogin","UserInputError","isValid","validatePassword","AuthenticationError","console","log","deleteUser","isUser","isAdmin","destroy","where","updateUser","update","messages","Message","userId"],"mappings":"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","sourcesContent":["// Generate token\nimport jwt from \"jsonwebtoken\";\n// Allow for authentications\nimport { combineResolvers } from \"graphql-resolvers\";\n// Apollo error handling\nimport { AuthenticationError, UserInputError } from \"apollo-server\";\n// Check if user has admin role\nimport { isAdmin, isAuthenticated, isUser } from \"./authorization\";\n\n// Generate token\nconst createToken = async (user, secret, expiresIn) => {\n  const { id, email, username, role } = user;\n  return await jwt.sign({ id, email, username, role }, secret, {\n    expiresIn,\n  });\n};\n\nexport default {\n  Query: {\n    // Multiple Users\n    getUsers: async (parent, args, { models }) => {\n      return await models.User.findAll();\n    },\n    // Single User\n    getUser: async (parent, { id }, { models }) => {\n      return await models.User.findByPk(id);\n    },\n    // Current User\n    me: async (parent, args, { models, me }) => {\n      if (!me) {\n        return null;\n      }\n      return await models.User.findByPk(me.id);\n    },\n  },\n  Mutation: {\n    // Add user with hashed password\n    registerUser: async (\n      parent,\n      {\n        username,\n        email,\n        password,\n        firstName,\n        lastName,\n        role,\n        phoneNumber,\n        completedProfile,\n      },\n      { models, secret }\n    ) => {\n      const newUser = await models.User.create({\n        username,\n        email,\n        password,\n        firstName,\n        lastName,\n        role,\n        phoneNumber,\n        completedProfile,\n      });\n\n      return {\n        token: createToken(newUser, secret, \"30 days\"),\n        user: newUser,\n      };\n    },\n    // Sign in user based on user input.\n    loginUser: async (\n      parent,\n      // Login can be username or email\n      { login, password },\n      { models, secret }\n    ) => {\n      const user = await models.User.findByLogin(login);\n      // Throw user input error if no user found\n      if (!user) {\n        throw new UserInputError(\"No user found with this login credentials.\");\n      }\n\n      // Boolean variable if password if valid\n      const isValid = await user.validatePassword(password);\n\n      // If password is not valid, through authentication error\n      if (!isValid) {\n        throw new AuthenticationError(\"Invalid password.\");\n      }\n      console.log(user);\n      // Return token for client\n      return { user, token: createToken(user, secret, \"30 days\") };\n    },\n    // Delete a user\n    deleteUser: combineResolvers(\n      isUser || isAdmin,\n      async (parent, { id }, { models }) => {\n        return await models.User.destroy({\n          where: { id },\n        });\n      }\n    ),\n    // Delete a user\n    updateUser: combineResolvers(\n      isUser || isAdmin,\n      async (parent, args, { models }) => {\n        console.log(args);\n        let user = await models.User.findByPk(args.id);\n\n        user.username = args.username ? args.username : user.username;\n        user.email = args.email ? args.email : user.email;\n        user.password = args.password ? args.password : user.password;\n        user.firstName = args.firstName ? args.firstName : user.firstName;\n        user.lastName = args.lastName ? args.lastName : user.lastName;\n        user.role = args.role ? args.role : user.role;\n        user.phoneNumber = args.phoneNumber\n          ? args.phoneNumber\n          : user.phoneNumber;\n        user.completedProfile =\n          args.completedProfile !== null\n            ? args.completedProfile\n            : user.completedProfile;\n\n        await user.update({\n          username: user.username,\n          email: user.email,\n          password: user.password,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          phoneNumber: user.phoneNumber,\n          completedProfile: user.completedProfile,\n        });\n\n        return await models.User.findByPk(args.id);\n      }\n    ),\n  },\n  // Define User message type return value\n  User: {\n    messages: async (user, args, { models }) => {\n      return await models.Message.findAll({\n        where: {\n          userId: user.id,\n        },\n      });\n    },\n  },\n};\n"],"file":"user.js"}