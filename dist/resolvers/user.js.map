{"version":3,"sources":["../../src/resolvers/user.js"],"names":["createToken","user","secret","expiresIn","id","email","username","role","jwt","sign","Query","getUsers","parent","args","models","User","findAll","getUser","findByPk","me","console","log","Mutation","registerUser","password","firstName","lastName","phoneNumber","completedProfile","newUser","create","token","loginUser","login","findByLogin","UserInputError","isValid","validatePassword","AuthenticationError","deleteUser","isUser","isAdmin","destroy","where","updateUser","update","messages","Message","userId"],"mappings":"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","sourcesContent":["// Generate token\r\nimport jwt from \"jsonwebtoken\";\r\n// Allow for authentications\r\nimport { combineResolvers } from \"graphql-resolvers\";\r\n// Apollo error handling\r\nimport { AuthenticationError, UserInputError } from \"apollo-server\";\r\n// Check if user has admin role\r\nimport { isAdmin, isAuthenticated, isUser } from \"./authorization\";\r\n\r\n// Generate token\r\nconst createToken = async (user, secret, expiresIn) => {\r\n  const { id, email, username, role } = user;\r\n  return await jwt.sign({ id, email, username, role }, secret, {\r\n    expiresIn,\r\n  });\r\n};\r\n\r\nexport default {\r\n  Query: {\r\n    // Multiple Users\r\n    getUsers: async (parent, args, { models }) => {\r\n      return await models.User.findAll();\r\n    },\r\n    // Single User\r\n    getUser: async (parent, { id }, { models }) => {\r\n      return await models.User.findByPk(id);\r\n    },\r\n    // Current User\r\n    me: async (parent, args, { models, me }) => {\r\n      if (!me) {\r\n        return null;\r\n      }\r\n      console.log(await models.User.findByPk(me.id));\r\n      return await models.User.findByPk(me.id);\r\n    },\r\n  },\r\n  Mutation: {\r\n    // Add user with hashed password\r\n    registerUser: async (\r\n      parent,\r\n      {\r\n        username,\r\n        email,\r\n        password,\r\n        firstName,\r\n        lastName,\r\n        role,\r\n        phoneNumber,\r\n        completedProfile,\r\n      },\r\n      { models, secret }\r\n    ) => {\r\n      const newUser = await models.User.create({\r\n        username,\r\n        email,\r\n        password,\r\n        firstName,\r\n        lastName,\r\n        role,\r\n        phoneNumber,\r\n        completedProfile,\r\n      });\r\n\r\n      return {\r\n        token: createToken(newUser, secret, \"30 days\"),\r\n        user: newUser,\r\n      };\r\n    },\r\n    // Sign in user based on user input.\r\n    loginUser: async (\r\n      parent,\r\n      // Login can be username or email\r\n      { login, password },\r\n      { models, secret }\r\n    ) => {\r\n      const user = await models.User.findByLogin(login);\r\n      // Throw user input error if no user found\r\n      if (!user) {\r\n        throw new UserInputError(\"No user found with this login credentials.\");\r\n      }\r\n\r\n      // Boolean variable if password if valid\r\n      const isValid = await user.validatePassword(password);\r\n\r\n      // If password is not valid, through authentication error\r\n      if (!isValid) {\r\n        throw new AuthenticationError(\"Invalid password.\");\r\n      }\r\n      console.log(user);\r\n      // Return token for client\r\n      return { user, token: createToken(user, secret, \"30 days\") };\r\n    },\r\n    // Delete a user\r\n    deleteUser: combineResolvers(\r\n      isUser || isAdmin,\r\n      async (parent, { id }, { models }) => {\r\n        return await models.User.destroy({\r\n          where: { id },\r\n        });\r\n      }\r\n    ),\r\n    // Delete a user\r\n    updateUser: combineResolvers(\r\n      isUser || isAdmin,\r\n      async (parent, args, { models }) => {\r\n        console.log(args);\r\n        let user = await models.User.findByPk(args.id);\r\n\r\n        user.username = args.username ? args.username : user.username;\r\n        user.email = args.email ? args.email : user.email;\r\n        user.password = args.password ? args.password : user.password;\r\n        user.firstName = args.firstName ? args.firstName : user.firstName;\r\n        user.lastName = args.lastName ? args.lastName : user.lastName;\r\n        user.role = args.role ? args.role : user.role;\r\n        user.phoneNumber = args.phoneNumber\r\n          ? args.phoneNumber\r\n          : user.phoneNumber;\r\n        user.completedProfile = args.completedProfile !== null\r\n          ? args.completedProfile\r\n          : user.completedProfile;\r\n\r\n        await user.update({\r\n          username: user.username,\r\n          email: user.email,\r\n          password: user.password,\r\n          firstName: user.firstName,\r\n          lastName: user.lastName,\r\n          role: user.role,\r\n          phoneNumber: user.phoneNumber,\r\n          completedProfile: user.completedProfile,\r\n        });\r\n\r\n        return await models.User.findByPk(args.id);\r\n      }\r\n    ),\r\n  },\r\n  // Define User message type return value\r\n  User: {\r\n    messages: async (user, args, { models }) => {\r\n      return await models.Message.findAll({\r\n        where: {\r\n          userId: user.id,\r\n        },\r\n      });\r\n    },\r\n  },\r\n};\r\n"],"file":"user.js"}