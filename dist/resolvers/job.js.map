{"version":3,"sources":["../../src/resolvers/job.js"],"names":["Query","getJob","parent","id","models","Job","findOne","where","getAllJobs","args","findAll","Mutation","createJob","me","create","owner","err","console","log","updateJob","isAuthenticated","isAdmin","job","findByPk","then","Error","update","name","description","requirements","location","hours","deleteJob","destroy"],"mappings":";;;;;;;AAEA;;AAEA;;AAEA;;AAEA;;;;AAPA;AAEA;AAEA;AAEA;eAGc;AACZA,EAAAA,KAAK,EAAC;AACJ;AACAC,IAAAA,MAAM,EAAC,CAACC,MAAD,EAAS;AAACC,MAAAA;AAAD,KAAT,EAAe;AAACC,MAAAA;AAAD,KAAf,KAA4BA,MAAM,CAACC,GAAP,CAAWC,OAAX,CAAmB;AAACC,MAAAA,KAAK,EAAE;AAACJ,QAAAA;AAAD;AAAR,KAAnB,CAF/B;AAGJ;AACAK,IAAAA,UAAU,EAAC,CAACN,MAAD,EAASO,IAAT,EAAe;AAACL,MAAAA;AAAD,KAAf,KAA4BA,MAAM,CAACC,GAAP,CAAWK,OAAX;AAJnC,GADM;AAOZC,EAAAA,QAAQ,EAAC;AACP;AACAC,IAAAA,SAAS,EAAE,OAAOV,MAAP,EAAeO,IAAf,EAAqB;AAACL,MAAAA,MAAD;AAASS,MAAAA;AAAT,KAArB,KAAsC;AAC/C,UAAG;AACF,cAAMT,MAAM,CAACC,GAAP,CAAWS,MAAX,CAAkB,EAAC,GAAGL,IAAJ;AAAUM,UAAAA,KAAK,EAAEF,EAAE,CAACV;AAApB,SAAlB,CAAN;AACA,eAAO,IAAP;AACD,OAHA,CAGA,OAAMa,GAAN,EAAU;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,eAAO,KAAP;AACD;AACD,KAVM;AAWPG,IAAAA,SAAS,EAAE,OAAOjB,MAAP,EAAeO,IAAf,EAAqB;AAACL,MAAAA;AAAD,KAArB,KAAkC;AAC3CgB,wCAAmBC,sBAAnB,EACEC,GAAG,GAAGlB,MAAM,CAACC,GAAP,CAAWkB,QAAX,CAAoBd,IAAI,CAACN,EAAzB,EAA6BqB,IAA7B,CAAmCF,GAAG,IAAI;AAC9C,YAAG,CAACA,GAAJ,EAAQ;AACN,gBAAM,IAAIG,KAAJ,CAAU,WAAV,CAAN;AACD,SAFD,MAEK;AACHH,UAAAA,GAAG,CAACI,MAAJ,CAAW;AACTC,YAAAA,IAAI,EAAElB,IAAI,CAACkB,IAAL,IAAaL,GAAG,CAACK,IADd;AAETC,YAAAA,WAAW,EAAEnB,IAAI,CAACmB,WAAL,IAAoBN,GAAG,CAACM,WAF5B;AAGTC,YAAAA,YAAY,EAAEpB,IAAI,CAACoB,YAAL,IAAqBP,GAAG,CAACO,YAH9B;AAITC,YAAAA,QAAQ,EAAErB,IAAI,CAACqB,QAAL,IAAiBR,GAAG,CAACQ,QAJtB;AAKTC,YAAAA,KAAK,EAAEtB,IAAI,CAACsB,KAAL,IAAcT,GAAG,CAACS;AALhB,WAAX;AAOD;AACF,OAZK,CADR;AAcD,KA1BM;AA2BPC,IAAAA,SAAS,EAAE,wCACPZ,kCAAmBC,sBADZ,EAEP,OAAOnB,MAAP,EAAe;AAAEC,MAAAA;AAAF,KAAf,EAAuB;AAAEC,MAAAA;AAAF,KAAvB,KAAsC;AACpC,aAAO,MAAMA,MAAM,CAACC,GAAP,CAAW4B,OAAX,CAAmB;AAC9B1B,QAAAA,KAAK,EAAE;AAAEJ,UAAAA;AAAF;AADuB,OAAnB,CAAb;AAGD,KANM;AA3BJ;AAPG,C","sourcesContent":["\r\n// Generate token\r\nimport jwt from \"jsonwebtoken\";\r\n// Allow for authentications\r\nimport { combineResolvers } from \"graphql-resolvers\";\r\n// Apollo error handling\r\nimport { AuthenticationError, UserInputError } from \"apollo-server\";\r\n// Check if user has admin role\r\nimport { isAdmin, isAuthenticated, isUser } from \"./authorization\";\r\n\r\nexport default{\r\n  Query:{\r\n    //get a single job\r\n    getJob:(parent, {id}, {models}) => models.Job.findOne({where: {id}}),\r\n    //get all jobs\r\n    getAllJobs:(parent, args, {models}) => models.Job.findAll(),\r\n  },\r\n  Mutation:{\r\n    //createjob\r\n    createJob: async (parent, args, {models, me}) => {\r\n      try{\r\n       await models.Job.create({...args, owner: me.id});\r\n       return true;\r\n     }catch(err){\r\n       console.log(err);\r\n       return false;\r\n     }\r\n    },\r\n    updateJob: async (parent, args, {models}) => {\r\n      isAuthenticated || isAdmin,\r\n        job = models.Job.findByPk(args.id).then( job => {\r\n          if(!job){\r\n            throw new Error(\"not found\");\r\n          }else{\r\n            job.update({\r\n              name: args.name || job.name,\r\n              description: args.description || job.description,\r\n              requirements: args.requirements || job.requirements,\r\n              location: args.location || job.location,\r\n              hours: args.hours || job.hours,\r\n            })\r\n          }\r\n        })\r\n    },\r\n    deleteJob: combineResolvers(\r\n        isAuthenticated || isAdmin,\r\n        async (parent, { id }, { models }) => {\r\n          return await models.Job.destroy({\r\n            where: { id },\r\n          });\r\n        }\r\n      ),\r\n  },\r\n};\r\n"],"file":"job.js"}