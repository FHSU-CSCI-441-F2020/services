{"version":3,"sources":["../../src/resolvers/employer.js"],"names":["Query","getEmployer","parent","id","models","Employer","findByPk","getEmployers","args","findAll","Mutation","registerEmployer","isAuthenticated","isAdmin","address","Address","create","address1","address2","city","state","zip","country","employer","name","email","phoneNumber","owner","teamMembers","jobs","updateEmployer","newName","newEmail","newPhoneNumber","newTeamMembers","newJobs","newAddress1","newAddress2","newCity","newState","newZip","newCountry","update"],"mappings":"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","sourcesContent":["// Generate token\r\nimport jwt from \"jsonwebtoken\";\r\n// Allow for authentications\r\nimport { combineResolvers } from \"graphql-resolvers\";\r\n// Apollo error handling\r\nimport { AuthenticationError, EmployerInputError } from \"apollo-server\";\r\n// Check if user has admin role\r\nimport {\r\n  isAdmin,\r\n  isAuthenticated,\r\n  isEmployer,\r\n  isAuthEmployee,\r\n} from \"./authorization\";\r\n\r\nexport default {\r\n  Query: {\r\n    // Single Employer\r\n    getEmployer: async (parent, { id }, { models }) => {\r\n      return await models.Employer.findByPk(id);\r\n    },\r\n    // All Employers\r\n    getEmployers: async (parent, args, { models }) => {\r\n      return await models.Employer.findAll();\r\n    },\r\n  },\r\n  Mutation: {\r\n    // Create new employer\r\n    registerEmployer: combineResolvers(\r\n      isAuthenticated || isAdmin,\r\n      async (parent, args, { models }) => {\r\n        // Create address\r\n        const address = await models.Address.create({\r\n          address1: args.address1,\r\n          address2: args.address2,\r\n          city: args.city,\r\n          state: args.state,\r\n          zip: args.zip,\r\n          country: args.country,\r\n        });\r\n\r\n        // Create new employer, add foreign key for address\r\n        const employer = await models.Employer.create({\r\n          name: args.name,\r\n          email: args.email,\r\n          phoneNumber: args.phoneNumber,\r\n          owner: args.owner,\r\n          teamMembers: [args.owner],\r\n          jobs: [],\r\n          address: address.id,\r\n        });\r\n\r\n        // Return employer and address as an object\r\n        return { employer, address };\r\n      }\r\n    ),\r\n    // Update employer information\r\n    updateEmployer: combineResolvers(\r\n      isAuthenticated || isAdmin,\r\n      async (parent, args, { models }) => {\r\n        // Retrieve both employer and address\r\n        let employer = await models.Employer.findByPk(args.id);\r\n        let address = await models.Address.findByPk(employer.address);\r\n\r\n        // Check each possible arguments for changes\r\n        const newName = args.name ? args.name : employer.name;\r\n        const newEmail = args.email ? args.email : employer.email;\r\n        const newPhoneNumber = args.phoneNumber\r\n          ? args.phoneNumber\r\n          : employer.phoneNumber;\r\n        const newTeamMembers = args.teamMembers\r\n          ? args.teamMembers\r\n          : employer.teamMembers;\r\n        const newJobs = args.jobs ? args.jobs : employer.jobs;\r\n        const newAddress1 = args.address1 ? args.address1 : address.address1;\r\n        const newAddress2 = args.address2 ? args.address2 : address.address2;\r\n        const newCity = args.city ? args.city : address.city;\r\n        const newState = args.state ? args.state : address.state;\r\n        const newZip = args.zip ? args.zip : address.zip;\r\n        const newCountry = args.country ? args.country : address.country;\r\n\r\n        // Update employer if data changed\r\n        employer = await employer.update({\r\n          name: newName,\r\n          email: newEmail,\r\n          phoneNumber: newPhoneNumber,\r\n          teamMembers: newTeamMembers,\r\n          jobs: newJobs,\r\n        });\r\n\r\n        // Update address if data changed\r\n        address = await address.update({\r\n          address1: newAddress1,\r\n          address2: newAddress2,\r\n          city: newCity,\r\n          state: newState,\r\n          zip: newZip,\r\n          country: newCountry,\r\n        });\r\n\r\n        // Return employer and address as an object\r\n        return { employer, address };\r\n      }\r\n    ),\r\n  },\r\n};\r\n"],"file":"employer.js"}