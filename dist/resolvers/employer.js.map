{"version":3,"sources":["../../src/resolvers/employer.js"],"names":["Query","getEmployer","parent","id","models","Employer","findByPk","getEmployers","args","findAll","Mutation","registerEmployer","isAuthenticated","isAdmin","employer","create","name","email","phoneNumber","owner","teamMembers","jobs","address1","address2","city","state","zip","country","updateEmployer","newName","newEmail","newPhoneNumber","newTeamMembers","newJobs","newAddress1","address","newAddress2","newCity","newState","newZip","newCountry","update"],"mappings":"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","sourcesContent":["// Generate token\r\nimport jwt from \"jsonwebtoken\";\r\n// Allow for authentications\r\nimport { combineResolvers } from \"graphql-resolvers\";\r\n// Apollo error handling\r\nimport { AuthenticationError, EmployerInputError } from \"apollo-server\";\r\n// Check if user has admin role\r\nimport {\r\n  isAdmin,\r\n  isAuthenticated,\r\n  isEmployer,\r\n  isAuthEmployee,\r\n} from \"./authorization\";\r\n\r\nexport default {\r\n  Query: {\r\n    // Single Employer\r\n    getEmployer: async (parent, { id }, { models }) => {\r\n      return await models.Employer.findByPk(id);\r\n    },\r\n    // All Employers\r\n    getEmployers: async (parent, args, { models }) => {\r\n      return await models.Employer.findAll();\r\n    },\r\n  },\r\n  Mutation: {\r\n    // Create new employer\r\n    registerEmployer: combineResolvers(\r\n      isAuthenticated || isAdmin,\r\n      async (parent, args, { models }) => {\r\n        // Create new employer\r\n        const employer = await models.Employer.create({\r\n          name: args.name,\r\n          email: args.email,\r\n          phoneNumber: args.phoneNumber,\r\n          owner: args.owner,\r\n          teamMembers: [args.owner],\r\n          jobs: [],\r\n          address1: args.address1,\r\n          address2: args.address2,\r\n          city: args.city,\r\n          state: args.state,\r\n          zip: args.zip,\r\n          country: args.country,\r\n        });\r\n\r\n        // Return employer\r\n        return employer;\r\n      }\r\n    ),\r\n    // Update employer information\r\n    updateEmployer: combineResolvers(\r\n      isAuthenticated || isAdmin,\r\n      async (parent, args, { models }) => {\r\n        // Retrieve employer\r\n        let employer = await models.Employer.findByPk(args.id);\r\n\r\n        // Check each possible arguments for changes\r\n        const newName = args.name ? args.name : employer.name;\r\n        const newEmail = args.email ? args.email : employer.email;\r\n        const newPhoneNumber = args.phoneNumber\r\n          ? args.phoneNumber\r\n          : employer.phoneNumber;\r\n        const newTeamMembers = args.teamMembers\r\n          ? args.teamMembers\r\n          : employer.teamMembers;\r\n        const newJobs = args.jobs ? args.jobs : employer.jobs;\r\n        const newAddress1 = args.address1 ? args.address1 : address.address1;\r\n        const newAddress2 = args.address2 ? args.address2 : address.address2;\r\n        const newCity = args.city ? args.city : address.city;\r\n        const newState = args.state ? args.state : address.state;\r\n        const newZip = args.zip ? args.zip : address.zip;\r\n        const newCountry = args.country ? args.country : address.country;\r\n\r\n        // Update employer if data changed\r\n        employer = await employer.update({\r\n          name: newName,\r\n          email: newEmail,\r\n          phoneNumber: newPhoneNumber,\r\n          teamMembers: newTeamMembers,\r\n          jobs: newJobs,\r\n          address1: newAddress1,\r\n          address2: newAddress2,\r\n          city: newCity,\r\n          state: newState,\r\n          zip: newZip,\r\n          country: newCountry,\r\n        });\r\n\r\n        // Return employer\r\n        return employer;\r\n      }\r\n    ),\r\n  },\r\n};\r\n"],"file":"employer.js"}