{"version":3,"sources":["../../src/tests/user.spec.js"],"names":["describe","it","expectedResult","data","user","id","username","email","role","result","userApi","to","eql","signIn","token","login","password","errors","deleteUser","message","signUp","not","have","property"],"mappings":";;AACA;;AACA;;;;;;AAFA;AAIA;AACAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBA,EAAAA,QAAQ,CAAC,yBAAD,EAA4B,MAAM;AACxCC,IAAAA,EAAE,CAAC,uCAAD,EAA0C,YAAY;AACtD;AACA,YAAMC,cAAc,GAAG;AACrBC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE;AACJC,YAAAA,EAAE,EAAE,GADA;AAEJC,YAAAA,QAAQ,EAAE,UAFN;AAGJC,YAAAA,KAAK,EAAE,iBAHH;AAIJC,YAAAA,IAAI,EAAE;AAJF;AADF;AADe,OAAvB,CAFsD,CAYtD;;AACA,YAAMC,MAAM,GAAG,MAAMC,OAAO,CAACN,IAAR,CAAa;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAb,CAArB,CAbsD,CActD;;AACA,wBAAOI,MAAM,CAACN,IAAd,EAAoBQ,EAApB,CAAuBC,GAAvB,CAA2BV,cAA3B;AACD,KAhBC,CAAF;AAiBAD,IAAAA,EAAE,CAAC,wCAAD,EAA2C,YAAY;AACvD,YAAMC,cAAc,GAAG;AACrBC,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE;AADF;AADe,OAAvB,CADuD,CAMvD;;AACA,YAAMK,MAAM,GAAG,MAAMC,OAAO,CAACN,IAAR,CAAa;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAb,CAArB,CAPuD,CAQvD;;AACA,wBAAOI,MAAM,CAACN,IAAd,EAAoBQ,EAApB,CAAuBC,GAAvB,CAA2BV,cAA3B;AACD,KAVC,CAAF;AAWD,GA7BO,CAAR;AA8BAF,EAAAA,QAAQ,CAAC,mCAAD,EAAsC,MAAM;AAClDC,IAAAA,EAAE,CAAC,wDAAD,EAA2D,YAAY;AACvE;AACA,YAAM;AACJE,QAAAA,IAAI,EAAE;AACJA,UAAAA,IAAI,EAAE;AACJU,YAAAA,MAAM,EAAE;AAAEC,cAAAA;AAAF;AADJ;AADF;AADF,UAMF,MAAMJ,OAAO,CAACG,MAAR,CAAe;AACvBE,QAAAA,KAAK,EAAE,SADgB;AAEvBC,QAAAA,QAAQ,EAAE;AAFa,OAAf,CANV,CAFuE,CAavE;;AACA,YAAM;AACJb,QAAAA,IAAI,EAAE;AAAEc,UAAAA;AAAF;AADF,UAEF,MAAMP,OAAO,CAACQ,UAAR,CAAmB;AAAEb,QAAAA,EAAE,EAAE;AAAN,OAAnB,EAAgCS,KAAhC,CAFV,CAduE,CAiBvE;;AACA,wBAAOG,MAAM,CAAC,CAAD,CAAN,CAAUE,OAAjB,EAA0BR,EAA1B,CAA6BC,GAA7B,CAAiC,0BAAjC;AACD,KAnBC,CAAF;AAoBD,GArBO,CAAR;AAsBAZ,EAAAA,QAAQ,CAAC,qEAAD,EAAwE,MAAM;AACpFC,IAAAA,EAAE,CAAC,8BAAD,EAAiC,YAAY;AAC7C;AACA,YAAMQ,MAAM,GAAG,MAAMC,OAAO,CAACU,MAAR,CAAe;AAClCd,QAAAA,QAAQ,EAAE,qBADwB;AAElCC,QAAAA,KAAK,EAAE,oCAF2B;AAGlCS,QAAAA,QAAQ,EAAE;AAHwB,OAAf,CAArB,CAF6C,CAO7C;;AACA,wBAAOP,MAAM,CAACN,IAAd,EAAoBQ,EAApB,CAAuBU,GAAvB,CAA2BC,IAA3B,CAAgCC,QAAhC,CAAyC,QAAzC;AACD,KATC,CAAF;AAUD,GAXO,CAAR;AAYD,CAjEO,CAAR","sourcesContent":["// Test module from chai\nimport { expect } from \"chai\";\nimport * as userApi from \"./api\";\n\n// Test cases for user\ndescribe(\"users\", () => {\n  describe(\"user(id: String!): User\", () => {\n    it(\"returns a user when user can be found\", async () => {\n      // Expected results for comparison\n      const expectedResult = {\n        data: {\n          user: {\n            id: \"1\",\n            username: \"rwieruch\",\n            email: \"hello@robin.com\",\n            role: \"ADMIN\",\n          },\n        },\n      };\n      // Get data for user 1\n      const result = await userApi.user({ id: \"1\" });\n      // Compare expected result matches returned results\n      expect(result.data).to.eql(expectedResult);\n    });\n    it(\"returns null when user cannot be found\", async () => {\n      const expectedResult = {\n        data: {\n          user: null,\n        },\n      };\n      // Get user which doesn't exist\n      const result = await userApi.user({ id: \"42\" });\n      // compare expected results match returned results\n      expect(result.data).to.eql(expectedResult);\n    });\n  });\n  describe(\"deleteUser(id: String!): Boolean!\", () => {\n    it(\"returns an error because only admins can delete a user\", async () => {\n      // Login in non admin user, set token value\n      const {\n        data: {\n          data: {\n            signIn: { token },\n          },\n        },\n      } = await userApi.signIn({\n        login: \"ddavids\",\n        password: \"ddavids\",\n      });\n\n      // Attempt to delete user, set error value\n      const {\n        data: { errors },\n      } = await userApi.deleteUser({ id: \"1\" }, token);\n      // Compare expected error is found in error\n      expect(errors[0].message).to.eql(\"Not authorized as admin.\");\n    });\n  });\n  describe(\"signUp(username: String!, email: String!, password: String!): Token\", () => {\n    it(\"returns a token for new user\", async () => {\n      // Result of user query\n      const result = await userApi.signUp({\n        username: \"111111fdsaskdjbf111\",\n        email: \"1d111111eadgsdafsddstyle@gmail.com\",\n        password: \"deadpass2020\",\n      });\n      // Check to ensure results do not have errors property\n      expect(result.data).to.not.have.property(\"errors\");\n    });\n  });\n});\n"],"file":"user.spec.js"}