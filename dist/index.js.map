{"version":3,"sources":["../src/index.js"],"names":["app","use","getMe","req","token","headers","jwt","verify","process","env","SECRET","e","AuthenticationError","server","ApolloServer","introspection","playground","typeDefs","schema","resolvers","formatError","error","message","replace","context","connection","models","loaders","user","DataLoader","keys","batchUsers","me","secret","applyMiddleware","path","httpServer","http","createServer","installSubscriptionHandlers","isDevelopment","DATABASE_DEVELOP","isProduction","DATABASE_URL","port","PORT","sequelize","sync","force","logging","then","createDefaultData","listen","console","log","User","create","username","email","password","firstName","lastName","role","phoneNumber","completedProfile","UserProfile","userId","statement","education","workExperience","lookingFor","skills","active","address1","city","state","zip","country"],"mappings":"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","sourcesContent":["import express from \"express\";\r\n// Token generation\r\nimport jwt from \"jsonwebtoken\";\r\n// Import required modules for Apollo/GraphQL\r\nimport { ApolloServer, AuthenticationError } from \"apollo-server-express\";\r\nimport schema from \"./schema\";\r\nimport resolvers from \"./resolvers\";\r\nimport models, { sequelize } from \"./models\";\r\n// Allow for cross-domain request\r\nimport cors from \"cors\";\r\n// Allow transfer of data over HTTP\r\nimport http from \"http\";\r\nimport DataLoader from \"dataloader\";\r\nimport loaders from \"./loaders\";\r\n// import { createDeflateRaw } from \"zlib\";\r\n\r\n// set app variable to express main function\r\nconst app = express();\r\n\r\n// Allow cross domain request\r\napp.use(cors());\r\n\r\n// Set current user\r\nconst getMe = async (req) => {\r\n  // token from header\r\n  const token = req.headers[\"x-token\"];\r\n  // If token is found\r\n  if (token) {\r\n    // Verify token matches secret token\r\n    try {\r\n      return await jwt.verify(token, process.env.SECRET);\r\n    } catch (e) {\r\n      throw new AuthenticationError(\"Your session expired. Sign in again.\");\r\n    }\r\n  }\r\n};\r\n\r\n// Init apollo server with schema and resolvers\r\nconst server = new ApolloServer({\r\n  introspection: true,\r\n  playground: true,\r\n  typeDefs: schema,\r\n  resolvers,\r\n  formatError: (error) => {\r\n    // remove the internal sequelize error message\r\n    // leave only the important validation error\r\n    const message = error.message\r\n      .replace(\"SequelizeValidationError: \", \"\")\r\n      .replace(\"Validation error: \", \"\");\r\n\r\n    return {\r\n      ...error,\r\n      message,\r\n    };\r\n  },\r\n  context: async ({ req, connection }) => {\r\n    if (connection) {\r\n      return {\r\n        models,\r\n        loaders: {\r\n          user: new DataLoader((keys) => loaders.user.batchUsers(keys, models)),\r\n        },\r\n      };\r\n    }\r\n\r\n    if (req) {\r\n      const me = await getMe(req);\r\n\r\n      return {\r\n        models,\r\n        me,\r\n        secret: process.env.SECRET,\r\n        loaders: {\r\n          user: new DataLoader((keys) => loaders.user.batchUsers(keys, models)),\r\n        },\r\n      };\r\n    }\r\n  },\r\n});\r\n\r\n// Set API path and include express as middleware\r\nserver.applyMiddleware({ app, path: \"/graphql\" });\r\n\r\n// Init http server to handle subscriptions\r\nconst httpServer = http.createServer(app);\r\nserver.installSubscriptionHandlers(httpServer);\r\n\r\n// Check if using testing database\r\nconst isDevelopment = !!process.env.DATABASE_DEVELOP;\r\n// Check if production database in use\r\nconst isProduction = !!process.env.DATABASE_URL;\r\n// Port based on prod or dev environment\r\nconst port = process.env.PORT || 8000;\r\n\r\n// Connect to postgres database through sequelize\r\nsequelize.sync({ force: true, logging: true }).then(async () => {\r\n  // sequelize.sync({ force: isTest }).then(async () => {\r\n  createDefaultData();\r\n  // Listen on port based on prod or dev\r\n  httpServer.listen({ port }, () => {\r\n    console.log(`Apollo Server on http://localhost:${port}/graphql`);\r\n  });\r\n});\r\n\r\n// For development, clean database, complete necessary table/column updates, add\r\n// data for each model\r\n\r\nasync function createDefaultData() {\r\n  await models.User.create({\r\n    username: \"Admin\",\r\n    email: \"admin@jobkik.com\",\r\n    password: \"jobkik\",\r\n    firstName: \"Head\",\r\n    lastName: \"Admin\",\r\n    role: \"admin\",\r\n    phoneNumber: \"5555555555\",\r\n    completedProfile: false,\r\n  });\r\n\r\n  await models.User.create({\r\n    username: \"User\",\r\n    email: \"user@jobkik.com\",\r\n    password: \"jobkik\",\r\n    firstName: \"Main\",\r\n    lastName: \"User\",\r\n    role: \"user\",\r\n    phoneNumber: \"1111111111\",\r\n    completedProfile: true,\r\n  });\r\n\r\n  await models.UserProfile.create({\r\n    userId: \"2\",\r\n    statement: \"This is a statement\",\r\n    education: [\"No education\"],\r\n    workExperience: [\"No experience\"],\r\n    lookingFor: [\"Not looking for anything\"],\r\n    skills: [\"No skills\"],\r\n    active: true,\r\n    address1: \"123 Main\",\r\n    city: \"Kansas City\",\r\n    state: \"MO\",\r\n    zip: 64151,\r\n    country: \"US\",\r\n  });\r\n}\r\n"],"file":"index.js"}