{"version":3,"sources":["../src/index.js"],"names":["app","use","getMe","req","token","headers","jwt","verify","process","env","SECRET","e","AuthenticationError","server","ApolloServer","introspection","playground","typeDefs","schema","resolvers","formatError","error","message","replace","context","connection","models","loaders","user","DataLoader","keys","batchUsers","me","secret","applyMiddleware","path","httpServer","http","createServer","installSubscriptionHandlers","resetDB","isProduction","DATABASE_URL","port","PORT","sequelize","sync","force","logging","then","createDefaultData","listen","console","log","User","create","username","email","password","firstName","lastName","role","phoneNumber","completedProfile","UserProfile","userId","statement","education","workExperience","lookingFor","skills","active","address1","city","state","zip","country"],"mappings":"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","sourcesContent":["import express from \"express\";\n// Token generation\nimport jwt from \"jsonwebtoken\";\n// Import required modules for Apollo/GraphQL\nimport { ApolloServer, AuthenticationError } from \"apollo-server-express\";\nimport schema from \"./schema\";\nimport resolvers from \"./resolvers\";\nimport models, { sequelize } from \"./models\";\n// Allow for cross-domain request\nimport cors from \"cors\";\n// Allow transfer of data over HTTP\nimport http from \"http\";\nimport DataLoader from \"dataloader\";\nimport loaders from \"./loaders\";\n// import { createDeflateRaw } from \"zlib\";\n\n// set app variable to express main function\nconst app = express();\n\n// Allow cross domain request\napp.use(cors());\n\n// Set current user\nconst getMe = async (req) => {\n  // token from header\n  const token = req.headers[\"x-token\"];\n  // If token is found\n  if (token) {\n    // Verify token matches secret token\n    try {\n      return await jwt.verify(token, process.env.SECRET);\n    } catch (e) {\n      throw new AuthenticationError(\"Your session expired. Sign in again.\");\n    }\n  }\n};\n\n// Init apollo server with schema and resolvers\nconst server = new ApolloServer({\n  introspection: true,\n  playground: true,\n  typeDefs: schema,\n  resolvers,\n  formatError: (error) => {\n    // remove the internal sequelize error message\n    // leave only the important validation error\n    const message = error.message\n      .replace(\"SequelizeValidationError: \", \"\")\n      .replace(\"Validation error: \", \"\");\n\n    return {\n      ...error,\n      message,\n    };\n  },\n  context: async ({ req, connection }) => {\n    if (connection) {\n      return {\n        models,\n        loaders: {\n          user: new DataLoader((keys) => loaders.user.batchUsers(keys, models)),\n        },\n      };\n    }\n\n    if (req) {\n      const me = await getMe(req);\n\n      return {\n        models,\n        me,\n        secret: process.env.SECRET,\n        loaders: {\n          user: new DataLoader((keys) => loaders.user.batchUsers(keys, models)),\n        },\n      };\n    }\n  },\n});\n\n// Set API path and include express as middleware\nserver.applyMiddleware({ app, path: \"/graphql\" });\n\n// Init http server to handle subscriptions\nconst httpServer = http.createServer(app);\nserver.installSubscriptionHandlers(httpServer);\n\n// Check if using testing database\nconst resetDB = true;\n// Check if production database in use\nconst isProduction = !!process.env.DATABASE_URL;\n// Port based on prod or dev environment\nconst port = process.env.PORT || 8000;\n\n// Connect to postgres database through sequelize\nsequelize.sync({ force: resetDB, logging: isProduction }).then(async () => {\n  // sequelize.sync({ force: isTest }).then(async () => {\n  if (resetDB) {\n    createDefaultData();\n  }\n\n  // Listen on port based on prod or dev\n  httpServer.listen({ port }, () => {\n    console.log(`Apollo Server on http://localhost:${port}/graphql`);\n  });\n});\n\n// For development, clean database, complete necessary table/column updates, add\n// data for each model\n\nasync function createDefaultData() {\n  await models.User.create({\n    username: \"Admin\",\n    email: \"admin@jobkik.com\",\n    password: \"jobkik\",\n    firstName: \"Head\",\n    lastName: \"Admin\",\n    role: \"admin\",\n    phoneNumber: \"5555555555\",\n    completedProfile: false,\n  });\n\n  await models.User.create({\n    username: \"User\",\n    email: \"user@jobkik.com\",\n    password: \"jobkik\",\n    firstName: \"Main\",\n    lastName: \"User\",\n    role: \"user\",\n    phoneNumber: \"1111111111\",\n    completedProfile: true,\n  });\n\n  await models.UserProfile.create({\n    userId: \"2\",\n    statement: \"This is a statement\",\n    education: [\"No education\"],\n    workExperience: [\"No experience\"],\n    lookingFor: [\"Not looking for anything\"],\n    skills: [\"No skills\"],\n    active: true,\n    address1: \"123 Main\",\n    city: \"Kansas City\",\n    state: \"MO\",\n    zip: 64151,\n    country: \"US\",\n  });\n}\n"],"file":"index.js"}